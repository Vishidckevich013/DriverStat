import { useState, useRef, useEffect } from 'react';
import './Header.css';
import DriveStatLogo from './DriveStatLogo';
import FeedbackModal from './FeedbackModal';
import ProfileModal from './ProfileModal';
import EditProfileModal from './EditProfileModal';
import NotificationModal from './NotificationModal';
import { sendFeedbackToTelegram, getCurrentUser } from '../api/supabaseApi';
import { getUserAvatar } from '../utils/avatarUtils';

const Header = () => {
  const [isFeedbackModalOpen, setIsFeedbackModalOpen] = useState(false);
  const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);
  const [isEditProfileModalOpen, setIsEditProfileModalOpen] = useState(false);
  const [currentUser, setCurrentUser] = useState<any>(null);
  const [showNotification, setShowNotification] = useState(false);
  const [notification, setNotification] = useState({ title: '', message: '', type: 'success' as any });
  const profileAreaRef = useRef<HTMLDivElement>(null);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    const loadUser = async () => {
      try {
        const user = await getCurrentUser();
        setCurrentUser(user);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      }
    };
    loadUser();
  }, []);

  const handleFeedbackSubmit = async (type: string, message: string) => {
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
      const telegramSent = await sendFeedbackToTelegram(type, message, {
        name: currentUser?.name || '–ì–æ—Å—Ç—å',
        email: currentUser?.email
      });
      
      if (telegramSent) {
        setNotification({
          title: '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!',
          message: '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ.',
          type: 'success'
        });
        setShowNotification(true);
      } else {
        // Fallback –µ—Å–ª–∏ Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', { type, message, user: currentUser?.name });
        setNotification({
          title: `${type === 'complaint' ? '–ñ–∞–ª–æ–±–∞' : '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'} –ø—Ä–∏–Ω—è—Ç–æ`,
          message: `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`,
          type: 'success'
        });
        setShowNotification(true);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:', error);
      setNotification({
        title: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        type: 'error'
      });
      setShowNotification(true);
    }
  };

  const handleProfileAreaClick = () => {
    setIsProfileModalOpen(!isProfileModalOpen);
  };

  const handleUserUpdate = (updatedUser: { name: string; avatar?: string }) => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    setCurrentUser((prev: any) => prev ? { ...prev, ...updatedUser } : null);
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedUser);
  };

  const handleProfileNotification = (message: string, type: 'success' | 'error') => {
    setNotification({
      title: type === 'success' ? '–£—Å–ø–µ—à–Ω–æ!' : '–û—à–∏–±–∫–∞!',
      message,
      type
    });
    setShowNotification(true);
  };

  const handleOpenEditProfile = () => {
    setIsEditProfileModalOpen(true);
  };

  return (
    <>
      <header className="header">
        <div className="header-brand">
          <DriveStatLogo size={40} className="header-logo" />
          <span className="header-title">DriveStat</span>
        </div>
        <div className="header-actions">
          <button className="notif" title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è">üîî</button>
          <button 
            className="msg" 
            title="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"
            onClick={() => setIsFeedbackModalOpen(true)}
          >
            üí¨
          </button>
          <div 
            className="profile-area"
            ref={profileAreaRef}
            onClick={handleProfileAreaClick}
            style={{ 
              display: 'flex', 
              alignItems: 'center', 
              gap: '8px', 
              cursor: 'pointer',
              padding: '4px 8px',
              borderRadius: '8px',
              transition: 'background-color 0.2s'
            }}
            onMouseEnter={(e) => e.currentTarget.style.backgroundColor = 'rgba(255, 255, 255, 0.1)'}
            onMouseLeave={(e) => e.currentTarget.style.backgroundColor = 'transparent'}
          >
            <span className="user">{currentUser?.name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</span>
            {currentUser?.avatar ? (
              <img 
                className="avatar" 
                src={getUserAvatar(currentUser, 32)} 
                alt="User Avatar"
              />
            ) : (
              <div 
                className="avatar avatar-placeholder"
                style={{
                  width: '32px',
                  height: '32px',
                  borderRadius: '50%',
                  background: '#6c4aff',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  color: 'white',
                  fontSize: '14px',
                  fontWeight: '600'
                }}
              >
                {currentUser?.name?.charAt(0)?.toUpperCase() || 'U'}
              </div>
            )}
          </div>
        </div>
      </header>

      <FeedbackModal
        isOpen={isFeedbackModalOpen}
        onClose={() => setIsFeedbackModalOpen(false)}
        onSubmit={handleFeedbackSubmit}
      />

      <ProfileModal
        isOpen={isProfileModalOpen}
        onClose={() => setIsProfileModalOpen(false)}
        anchorElement={profileAreaRef.current}
        user={currentUser}
        onEditProfile={handleOpenEditProfile}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
      <NotificationModal
        isOpen={showNotification}
        onClose={() => setShowNotification(false)}
        title={notification.title}
        message={notification.message}
        type={notification.type}
      />

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è */}
      {currentUser && (
        <EditProfileModal
          isOpen={isEditProfileModalOpen}
          onClose={() => setIsEditProfileModalOpen(false)}
          user={{
            id: currentUser.id || '',
            name: currentUser.name,
            email: currentUser.email,
            username: currentUser.username
          }}
          onUserUpdate={handleUserUpdate}
          onNotification={handleProfileNotification}
        />
      )}
    </>
  );
};

export default Header;
